# GSL::Sf
* Generate Test code.
* Allow Input/Output argument.
   gsl_sf_bessel_sequence_Jnu_e
   gsl_sf_angle_restrict_symm_e
   gsl_sf_angle_restrict_pos_e
* Allow NArray Integer for input argument.
* Add function written not in texinfo but in header.
* Different GSL versions have different API.
* Loops in iterator.
* Fix doc: Invalid Input/Output types for scalar function.
* Fix doc: Add C function definition in doc.

# Erbpp
* c_method definition

# Done
* Mathematical Functions:
* Special Functions:
* Physical Constants:
* Random Number Generation: rng
* Random Number Distributions: pdf, cdf
* Statistics:
* Running Statistics:
* Histograms:
* Interpolation: - only gsl_spline_* (Higher-level Interface), omit gsl_interp_*
* Wavelet Transforms: - omit matrix interface

# To do
* Polynomials:
* Least-Squares Fitting:
* Nonlinear Least-Squares Fitting:
* Basis Splines:
* Sparse matrix:

# NArray has
* Complex Numbers:
* Vectors and Matrices:
* Sorting:

# non-array?
* Permutations:
* Combinations:
* Multisets:
* Numerical Integration:
* N-tuples:
* Monte Carlo Integration:
* Simulated Annealing:
* Ordinary Differential Equations:
* Numerical Differentiation:
* Chebyshev Approximations:
* Series Acceleration:
* Discrete Hankel Transforms:
* One dimensional Root-Finding:
* One dimensional Minimization:
* Multidimensional Root-Finding:
* Multidimensional Minimization:

# Linalg has
* Linear Algebra:
* Eigensystems:

# FFTW has
* Fast Fourier Transforms:

# ?
* BLAS Support:
* Sparse Matrices:
* Sparse BLAS Support:
* Sparse Linear Algebra:
* IEEE floating-point arithmetic:
* Quasi-Random Sequences:
